// ApplicationServer\Comd_Open_Pos_Service\internal\positions\commodities.proto

// protoc --proto_path=internal --go_out=generated --go-grpc_out=generated internal/positions/commodities.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: positions/commodities.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CCPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CCP_CLM_MTCH_ACCNT string `protobuf:"bytes,1,opt,name=CCP_CLM_MTCH_ACCNT,json=CCPCLMMTCHACCNT,proto3" json:"CCP_CLM_MTCH_ACCNT,omitempty"`
}

func (x *CCPRequest) Reset() {
	*x = CCPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_positions_commodities_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCPRequest) ProtoMessage() {}

func (x *CCPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_positions_commodities_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCPRequest.ProtoReflect.Descriptor instead.
func (*CCPRequest) Descriptor() ([]byte, []int) {
	return file_positions_commodities_proto_rawDescGZIP(), []int{0}
}

func (x *CCPRequest) GetCCP_CLM_MTCH_ACCNT() string {
	if x != nil {
		return x.CCP_CLM_MTCH_ACCNT
	}
	return ""
}

type CCPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	COMMO []*CommodityPositions `protobuf:"bytes,1,rep,name=COMMO,proto3" json:"COMMO,omitempty"`
}

func (x *CCPResponse) Reset() {
	*x = CCPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_positions_commodities_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCPResponse) ProtoMessage() {}

func (x *CCPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_positions_commodities_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCPResponse.ProtoReflect.Descriptor instead.
func (*CCPResponse) Descriptor() ([]byte, []int) {
	return file_positions_commodities_proto_rawDescGZIP(), []int{1}
}

func (x *CCPResponse) GetCOMMO() []*CommodityPositions {
	if x != nil {
		return x.COMMO
	}
	return nil
}

type CommodityPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CCP_CLM_MTCH_ACCNT       string  `protobuf:"bytes,1,opt,name=CCP_CLM_MTCH_ACCNT,json=CCPCLMMTCHACCNT,proto3" json:"CCP_CLM_MTCH_ACCNT,omitempty"`
	CCP_XCHNG_CD             string  `protobuf:"bytes,2,opt,name=CCP_XCHNG_CD,json=CCPXCHNGCD,proto3" json:"CCP_XCHNG_CD,omitempty"`
	CCP_PRDCT_TYP            string  `protobuf:"bytes,3,opt,name=CCP_PRDCT_TYP,json=CCPPRDCTTYP,proto3" json:"CCP_PRDCT_TYP,omitempty"`
	CCP_INDSTK               string  `protobuf:"bytes,4,opt,name=CCP_INDSTK,json=CCPINDSTK,proto3" json:"CCP_INDSTK,omitempty"`
	CCP_UNDRLYNG             string  `protobuf:"bytes,5,opt,name=CCP_UNDRLYNG,json=CCPUNDRLYNG,proto3" json:"CCP_UNDRLYNG,omitempty"`
	CCP_EXPRY_DT             string  `protobuf:"bytes,6,opt,name=CCP_EXPRY_DT,json=CCPEXPRYDT,proto3" json:"CCP_EXPRY_DT,omitempty"`
	CCP_EXER_TYP             string  `protobuf:"bytes,7,opt,name=CCP_EXER_TYP,json=CCPEXERTYP,proto3" json:"CCP_EXER_TYP,omitempty"`
	CCP_STRK_PRC             int64   `protobuf:"varint,8,opt,name=CCP_STRK_PRC,json=CCPSTRKPRC,proto3" json:"CCP_STRK_PRC,omitempty"`
	CCP_OPT_TYP              string  `protobuf:"bytes,9,opt,name=CCP_OPT_TYP,json=CCPOPTTYP,proto3" json:"CCP_OPT_TYP,omitempty"`
	CCP_IBUY_QTY             int64   `protobuf:"varint,10,opt,name=CCP_IBUY_QTY,json=CCPIBUYQTY,proto3" json:"CCP_IBUY_QTY,omitempty"`
	CCP_IBUY_ORD_VAL         float64 `protobuf:"fixed64,11,opt,name=CCP_IBUY_ORD_VAL,json=CCPIBUYORDVAL,proto3" json:"CCP_IBUY_ORD_VAL,omitempty"`
	CCP_ISELL_QTY            int64   `protobuf:"varint,12,opt,name=CCP_ISELL_QTY,json=CCPISELLQTY,proto3" json:"CCP_ISELL_QTY,omitempty"`
	CCP_ISELL_ORD_VAL        float64 `protobuf:"fixed64,13,opt,name=CCP_ISELL_ORD_VAL,json=CCPISELLORDVAL,proto3" json:"CCP_ISELL_ORD_VAL,omitempty"`
	CCP_EXBUY_QTY            int64   `protobuf:"varint,14,opt,name=CCP_EXBUY_QTY,json=CCPEXBUYQTY,proto3" json:"CCP_EXBUY_QTY,omitempty"`
	CCP_EXBUY_ORD_VAL        float64 `protobuf:"fixed64,15,opt,name=CCP_EXBUY_ORD_VAL,json=CCPEXBUYORDVAL,proto3" json:"CCP_EXBUY_ORD_VAL,omitempty"`
	CCP_EXSELL_QTY           int64   `protobuf:"varint,16,opt,name=CCP_EXSELL_QTY,json=CCPEXSELLQTY,proto3" json:"CCP_EXSELL_QTY,omitempty"`
	CCP_EXSELL_ORD_VAL       float64 `protobuf:"fixed64,17,opt,name=CCP_EXSELL_ORD_VAL,json=CCPEXSELLORDVAL,proto3" json:"CCP_EXSELL_ORD_VAL,omitempty"`
	CCP_BUY_EXCTD_QTY        int64   `protobuf:"varint,18,opt,name=CCP_BUY_EXCTD_QTY,json=CCPBUYEXCTDQTY,proto3" json:"CCP_BUY_EXCTD_QTY,omitempty"`
	CCP_SELL_EXCTD_QTY       int64   `protobuf:"varint,19,opt,name=CCP_SELL_EXCTD_QTY,json=CCPSELLEXCTDQTY,proto3" json:"CCP_SELL_EXCTD_QTY,omitempty"`
	CCP_OPNPSTN_FLW          string  `protobuf:"bytes,20,opt,name=CCP_OPNPSTN_FLW,json=CCPOPNPSTNFLW,proto3" json:"CCP_OPNPSTN_FLW,omitempty"`
	CCP_OPNPSTN_QTY          int64   `protobuf:"varint,21,opt,name=CCP_OPNPSTN_QTY,json=CCPOPNPSTNQTY,proto3" json:"CCP_OPNPSTN_QTY,omitempty"`
	CCP_OPNPSTN_VAL          float64 `protobuf:"fixed64,22,opt,name=CCP_OPNPSTN_VAL,json=CCPOPNPSTNVAL,proto3" json:"CCP_OPNPSTN_VAL,omitempty"`
	CCP_EXRC_QTY             int64   `protobuf:"varint,23,opt,name=CCP_EXRC_QTY,json=CCPEXRCQTY,proto3" json:"CCP_EXRC_QTY,omitempty"`
	CCP_ASGND_QTY            int64   `protobuf:"varint,24,opt,name=CCP_ASGND_QTY,json=CCPASGNDQTY,proto3" json:"CCP_ASGND_QTY,omitempty"`
	CCP_OPT_PREMIUM          float64 `protobuf:"fixed64,25,opt,name=CCP_OPT_PREMIUM,json=CCPOPTPREMIUM,proto3" json:"CCP_OPT_PREMIUM,omitempty"`
	CCP_MTM_OPN_VAL          float64 `protobuf:"fixed64,26,opt,name=CCP_MTM_OPN_VAL,json=CCPMTMOPNVAL,proto3" json:"CCP_MTM_OPN_VAL,omitempty"`
	CCP_IMTM_OPN_VAL         float64 `protobuf:"fixed64,27,opt,name=CCP_IMTM_OPN_VAL,json=CCPIMTMOPNVAL,proto3" json:"CCP_IMTM_OPN_VAL,omitempty"`
	CCP_EXTRMLOSS_MRGN_EXTRA float64 `protobuf:"fixed64,28,opt,name=CCP_EXTRMLOSS_MRGN_EXTRA,json=CCPEXTRMLOSSMRGNEXTRA,proto3" json:"CCP_EXTRMLOSS_MRGN_EXTRA,omitempty"`
	CCP_ADDNL_MRGN           float64 `protobuf:"fixed64,29,opt,name=CCP_ADDNL_MRGN,json=CCPADDNLMRGN,proto3" json:"CCP_ADDNL_MRGN,omitempty"`
	CCP_SPCL_MRGN            float64 `protobuf:"fixed64,30,opt,name=CCP_SPCL_MRGN,json=CCPSPCLMRGN,proto3" json:"CCP_SPCL_MRGN,omitempty"`
	CCP_TNDR_MRGN            float64 `protobuf:"fixed64,31,opt,name=CCP_TNDR_MRGN,json=CCPTNDRMRGN,proto3" json:"CCP_TNDR_MRGN,omitempty"`
	CCP_DLVRY_MRGN           float64 `protobuf:"fixed64,32,opt,name=CCP_DLVRY_MRGN,json=CCPDLVRYMRGN,proto3" json:"CCP_DLVRY_MRGN,omitempty"`
	CCP_EXTRM_MIN_LOSS_MRGN  float64 `protobuf:"fixed64,33,opt,name=CCP_EXTRM_MIN_LOSS_MRGN,json=CCPEXTRMMINLOSSMRGN,proto3" json:"CCP_EXTRM_MIN_LOSS_MRGN,omitempty"`
	CCP_MTM_FLG              string  `protobuf:"bytes,34,opt,name=CCP_MTM_FLG,json=CCPMTMFLG,proto3" json:"CCP_MTM_FLG,omitempty"`
	CCP_EXTRM_LOSS_MRGN      float64 `protobuf:"fixed64,35,opt,name=CCP_EXTRM_LOSS_MRGN,json=CCPEXTRMLOSSMRGN,proto3" json:"CCP_EXTRM_LOSS_MRGN,omitempty"`
	CCP_FLAT_VAL_MRGN        float64 `protobuf:"fixed64,36,opt,name=CCP_FLAT_VAL_MRGN,json=CCPFLATVALMRGN,proto3" json:"CCP_FLAT_VAL_MRGN,omitempty"`
	CCP_TRG_PRC              float64 `protobuf:"fixed64,37,opt,name=CCP_TRG_PRC,json=CCPTRGPRC,proto3" json:"CCP_TRG_PRC,omitempty"`
	CCP_MIN_TRG_PRC          float64 `protobuf:"fixed64,38,opt,name=CCP_MIN_TRG_PRC,json=CCPMINTRGPRC,proto3" json:"CCP_MIN_TRG_PRC,omitempty"`
	CCP_DEVOLMNT_MRGN        float64 `protobuf:"fixed64,39,opt,name=CCP_DEVOLMNT_MRGN,json=CCPDEVOLMNTMRGN,proto3" json:"CCP_DEVOLMNT_MRGN,omitempty"`
	CCP_MTMSQ_ORDCNT         int32   `protobuf:"varint,40,opt,name=CCP_MTMSQ_ORDCNT,json=CCPMTMSQORDCNT,proto3" json:"CCP_MTMSQ_ORDCNT,omitempty"`
	CCP_AVG_PRC              float64 `protobuf:"fixed64,41,opt,name=CCP_AVG_PRC,json=CCPAVGPRC,proto3" json:"CCP_AVG_PRC,omitempty"`
}

func (x *CommodityPositions) Reset() {
	*x = CommodityPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_positions_commodities_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommodityPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityPositions) ProtoMessage() {}

func (x *CommodityPositions) ProtoReflect() protoreflect.Message {
	mi := &file_positions_commodities_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityPositions.ProtoReflect.Descriptor instead.
func (*CommodityPositions) Descriptor() ([]byte, []int) {
	return file_positions_commodities_proto_rawDescGZIP(), []int{2}
}

func (x *CommodityPositions) GetCCP_CLM_MTCH_ACCNT() string {
	if x != nil {
		return x.CCP_CLM_MTCH_ACCNT
	}
	return ""
}

func (x *CommodityPositions) GetCCP_XCHNG_CD() string {
	if x != nil {
		return x.CCP_XCHNG_CD
	}
	return ""
}

func (x *CommodityPositions) GetCCP_PRDCT_TYP() string {
	if x != nil {
		return x.CCP_PRDCT_TYP
	}
	return ""
}

func (x *CommodityPositions) GetCCP_INDSTK() string {
	if x != nil {
		return x.CCP_INDSTK
	}
	return ""
}

func (x *CommodityPositions) GetCCP_UNDRLYNG() string {
	if x != nil {
		return x.CCP_UNDRLYNG
	}
	return ""
}

func (x *CommodityPositions) GetCCP_EXPRY_DT() string {
	if x != nil {
		return x.CCP_EXPRY_DT
	}
	return ""
}

func (x *CommodityPositions) GetCCP_EXER_TYP() string {
	if x != nil {
		return x.CCP_EXER_TYP
	}
	return ""
}

func (x *CommodityPositions) GetCCP_STRK_PRC() int64 {
	if x != nil {
		return x.CCP_STRK_PRC
	}
	return 0
}

func (x *CommodityPositions) GetCCP_OPT_TYP() string {
	if x != nil {
		return x.CCP_OPT_TYP
	}
	return ""
}

func (x *CommodityPositions) GetCCP_IBUY_QTY() int64 {
	if x != nil {
		return x.CCP_IBUY_QTY
	}
	return 0
}

func (x *CommodityPositions) GetCCP_IBUY_ORD_VAL() float64 {
	if x != nil {
		return x.CCP_IBUY_ORD_VAL
	}
	return 0
}

func (x *CommodityPositions) GetCCP_ISELL_QTY() int64 {
	if x != nil {
		return x.CCP_ISELL_QTY
	}
	return 0
}

func (x *CommodityPositions) GetCCP_ISELL_ORD_VAL() float64 {
	if x != nil {
		return x.CCP_ISELL_ORD_VAL
	}
	return 0
}

func (x *CommodityPositions) GetCCP_EXBUY_QTY() int64 {
	if x != nil {
		return x.CCP_EXBUY_QTY
	}
	return 0
}

func (x *CommodityPositions) GetCCP_EXBUY_ORD_VAL() float64 {
	if x != nil {
		return x.CCP_EXBUY_ORD_VAL
	}
	return 0
}

func (x *CommodityPositions) GetCCP_EXSELL_QTY() int64 {
	if x != nil {
		return x.CCP_EXSELL_QTY
	}
	return 0
}

func (x *CommodityPositions) GetCCP_EXSELL_ORD_VAL() float64 {
	if x != nil {
		return x.CCP_EXSELL_ORD_VAL
	}
	return 0
}

func (x *CommodityPositions) GetCCP_BUY_EXCTD_QTY() int64 {
	if x != nil {
		return x.CCP_BUY_EXCTD_QTY
	}
	return 0
}

func (x *CommodityPositions) GetCCP_SELL_EXCTD_QTY() int64 {
	if x != nil {
		return x.CCP_SELL_EXCTD_QTY
	}
	return 0
}

func (x *CommodityPositions) GetCCP_OPNPSTN_FLW() string {
	if x != nil {
		return x.CCP_OPNPSTN_FLW
	}
	return ""
}

func (x *CommodityPositions) GetCCP_OPNPSTN_QTY() int64 {
	if x != nil {
		return x.CCP_OPNPSTN_QTY
	}
	return 0
}

func (x *CommodityPositions) GetCCP_OPNPSTN_VAL() float64 {
	if x != nil {
		return x.CCP_OPNPSTN_VAL
	}
	return 0
}

func (x *CommodityPositions) GetCCP_EXRC_QTY() int64 {
	if x != nil {
		return x.CCP_EXRC_QTY
	}
	return 0
}

func (x *CommodityPositions) GetCCP_ASGND_QTY() int64 {
	if x != nil {
		return x.CCP_ASGND_QTY
	}
	return 0
}

func (x *CommodityPositions) GetCCP_OPT_PREMIUM() float64 {
	if x != nil {
		return x.CCP_OPT_PREMIUM
	}
	return 0
}

func (x *CommodityPositions) GetCCP_MTM_OPN_VAL() float64 {
	if x != nil {
		return x.CCP_MTM_OPN_VAL
	}
	return 0
}

func (x *CommodityPositions) GetCCP_IMTM_OPN_VAL() float64 {
	if x != nil {
		return x.CCP_IMTM_OPN_VAL
	}
	return 0
}

func (x *CommodityPositions) GetCCP_EXTRMLOSS_MRGN_EXTRA() float64 {
	if x != nil {
		return x.CCP_EXTRMLOSS_MRGN_EXTRA
	}
	return 0
}

func (x *CommodityPositions) GetCCP_ADDNL_MRGN() float64 {
	if x != nil {
		return x.CCP_ADDNL_MRGN
	}
	return 0
}

func (x *CommodityPositions) GetCCP_SPCL_MRGN() float64 {
	if x != nil {
		return x.CCP_SPCL_MRGN
	}
	return 0
}

func (x *CommodityPositions) GetCCP_TNDR_MRGN() float64 {
	if x != nil {
		return x.CCP_TNDR_MRGN
	}
	return 0
}

func (x *CommodityPositions) GetCCP_DLVRY_MRGN() float64 {
	if x != nil {
		return x.CCP_DLVRY_MRGN
	}
	return 0
}

func (x *CommodityPositions) GetCCP_EXTRM_MIN_LOSS_MRGN() float64 {
	if x != nil {
		return x.CCP_EXTRM_MIN_LOSS_MRGN
	}
	return 0
}

func (x *CommodityPositions) GetCCP_MTM_FLG() string {
	if x != nil {
		return x.CCP_MTM_FLG
	}
	return ""
}

func (x *CommodityPositions) GetCCP_EXTRM_LOSS_MRGN() float64 {
	if x != nil {
		return x.CCP_EXTRM_LOSS_MRGN
	}
	return 0
}

func (x *CommodityPositions) GetCCP_FLAT_VAL_MRGN() float64 {
	if x != nil {
		return x.CCP_FLAT_VAL_MRGN
	}
	return 0
}

func (x *CommodityPositions) GetCCP_TRG_PRC() float64 {
	if x != nil {
		return x.CCP_TRG_PRC
	}
	return 0
}

func (x *CommodityPositions) GetCCP_MIN_TRG_PRC() float64 {
	if x != nil {
		return x.CCP_MIN_TRG_PRC
	}
	return 0
}

func (x *CommodityPositions) GetCCP_DEVOLMNT_MRGN() float64 {
	if x != nil {
		return x.CCP_DEVOLMNT_MRGN
	}
	return 0
}

func (x *CommodityPositions) GetCCP_MTMSQ_ORDCNT() int32 {
	if x != nil {
		return x.CCP_MTMSQ_ORDCNT
	}
	return 0
}

func (x *CommodityPositions) GetCCP_AVG_PRC() float64 {
	if x != nil {
		return x.CCP_AVG_PRC
	}
	return 0
}

var File_positions_commodities_proto protoreflect.FileDescriptor

var file_positions_commodities_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x39, 0x0a, 0x0a, 0x43, 0x43, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x43, 0x43, 0x50, 0x5f, 0x43, 0x4c,
	0x4d, 0x5f, 0x4d, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x43, 0x4e, 0x54, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x43, 0x43, 0x50, 0x43, 0x4c, 0x4d, 0x4d, 0x54, 0x43, 0x48, 0x41, 0x43,
	0x43, 0x4e, 0x54, 0x22, 0x42, 0x0a, 0x0b, 0x43, 0x43, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x05, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x22, 0xd3, 0x0c, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b,
	0x0a, 0x12, 0x43, 0x43, 0x50, 0x5f, 0x43, 0x4c, 0x4d, 0x5f, 0x4d, 0x54, 0x43, 0x48, 0x5f, 0x41,
	0x43, 0x43, 0x4e, 0x54, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x43, 0x50, 0x43,
	0x4c, 0x4d, 0x4d, 0x54, 0x43, 0x48, 0x41, 0x43, 0x43, 0x4e, 0x54, 0x12, 0x20, 0x0a, 0x0c, 0x43,
	0x43, 0x50, 0x5f, 0x58, 0x43, 0x48, 0x4e, 0x47, 0x5f, 0x43, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x43, 0x50, 0x58, 0x43, 0x48, 0x4e, 0x47, 0x43, 0x44, 0x12, 0x22, 0x0a,
	0x0d, 0x43, 0x43, 0x50, 0x5f, 0x50, 0x52, 0x44, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x43, 0x50, 0x50, 0x52, 0x44, 0x43, 0x54, 0x54, 0x59,
	0x50, 0x12, 0x1d, 0x0a, 0x0a, 0x43, 0x43, 0x50, 0x5f, 0x49, 0x4e, 0x44, 0x53, 0x54, 0x4b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x43, 0x50, 0x49, 0x4e, 0x44, 0x53, 0x54, 0x4b,
	0x12, 0x21, 0x0a, 0x0c, 0x43, 0x43, 0x50, 0x5f, 0x55, 0x4e, 0x44, 0x52, 0x4c, 0x59, 0x4e, 0x47,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x43, 0x50, 0x55, 0x4e, 0x44, 0x52, 0x4c,
	0x59, 0x4e, 0x47, 0x12, 0x20, 0x0a, 0x0c, 0x43, 0x43, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x59,
	0x5f, 0x44, 0x54, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x43, 0x50, 0x45, 0x58,
	0x50, 0x52, 0x59, 0x44, 0x54, 0x12, 0x20, 0x0a, 0x0c, 0x43, 0x43, 0x50, 0x5f, 0x45, 0x58, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x43, 0x50,
	0x45, 0x58, 0x45, 0x52, 0x54, 0x59, 0x50, 0x12, 0x20, 0x0a, 0x0c, 0x43, 0x43, 0x50, 0x5f, 0x53,
	0x54, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x43, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43,
	0x43, 0x50, 0x53, 0x54, 0x52, 0x4b, 0x50, 0x52, 0x43, 0x12, 0x1e, 0x0a, 0x0b, 0x43, 0x43, 0x50,
	0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x43, 0x43, 0x50, 0x4f, 0x50, 0x54, 0x54, 0x59, 0x50, 0x12, 0x20, 0x0a, 0x0c, 0x43, 0x43, 0x50,
	0x5f, 0x49, 0x42, 0x55, 0x59, 0x5f, 0x51, 0x54, 0x59, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x43, 0x43, 0x50, 0x49, 0x42, 0x55, 0x59, 0x51, 0x54, 0x59, 0x12, 0x27, 0x0a, 0x10, 0x43,
	0x43, 0x50, 0x5f, 0x49, 0x42, 0x55, 0x59, 0x5f, 0x4f, 0x52, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x43, 0x43, 0x50, 0x49, 0x42, 0x55, 0x59, 0x4f, 0x52,
	0x44, 0x56, 0x41, 0x4c, 0x12, 0x22, 0x0a, 0x0d, 0x43, 0x43, 0x50, 0x5f, 0x49, 0x53, 0x45, 0x4c,
	0x4c, 0x5f, 0x51, 0x54, 0x59, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x43, 0x50,
	0x49, 0x53, 0x45, 0x4c, 0x4c, 0x51, 0x54, 0x59, 0x12, 0x29, 0x0a, 0x11, 0x43, 0x43, 0x50, 0x5f,
	0x49, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x43, 0x43, 0x50, 0x49, 0x53, 0x45, 0x4c, 0x4c, 0x4f, 0x52, 0x44,
	0x56, 0x41, 0x4c, 0x12, 0x22, 0x0a, 0x0d, 0x43, 0x43, 0x50, 0x5f, 0x45, 0x58, 0x42, 0x55, 0x59,
	0x5f, 0x51, 0x54, 0x59, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x43, 0x50, 0x45,
	0x58, 0x42, 0x55, 0x59, 0x51, 0x54, 0x59, 0x12, 0x29, 0x0a, 0x11, 0x43, 0x43, 0x50, 0x5f, 0x45,
	0x58, 0x42, 0x55, 0x59, 0x5f, 0x4f, 0x52, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x43, 0x43, 0x50, 0x45, 0x58, 0x42, 0x55, 0x59, 0x4f, 0x52, 0x44, 0x56,
	0x41, 0x4c, 0x12, 0x24, 0x0a, 0x0e, 0x43, 0x43, 0x50, 0x5f, 0x45, 0x58, 0x53, 0x45, 0x4c, 0x4c,
	0x5f, 0x51, 0x54, 0x59, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x43, 0x50, 0x45,
	0x58, 0x53, 0x45, 0x4c, 0x4c, 0x51, 0x54, 0x59, 0x12, 0x2b, 0x0a, 0x12, 0x43, 0x43, 0x50, 0x5f,
	0x45, 0x58, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x43, 0x43, 0x50, 0x45, 0x58, 0x53, 0x45, 0x4c, 0x4c, 0x4f,
	0x52, 0x44, 0x56, 0x41, 0x4c, 0x12, 0x29, 0x0a, 0x11, 0x43, 0x43, 0x50, 0x5f, 0x42, 0x55, 0x59,
	0x5f, 0x45, 0x58, 0x43, 0x54, 0x44, 0x5f, 0x51, 0x54, 0x59, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x43, 0x43, 0x50, 0x42, 0x55, 0x59, 0x45, 0x58, 0x43, 0x54, 0x44, 0x51, 0x54, 0x59,
	0x12, 0x2b, 0x0a, 0x12, 0x43, 0x43, 0x50, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x45, 0x58, 0x43,
	0x54, 0x44, 0x5f, 0x51, 0x54, 0x59, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x43, 0x43,
	0x50, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x58, 0x43, 0x54, 0x44, 0x51, 0x54, 0x59, 0x12, 0x26, 0x0a,
	0x0f, 0x43, 0x43, 0x50, 0x5f, 0x4f, 0x50, 0x4e, 0x50, 0x53, 0x54, 0x4e, 0x5f, 0x46, 0x4c, 0x57,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x43, 0x50, 0x4f, 0x50, 0x4e, 0x50, 0x53,
	0x54, 0x4e, 0x46, 0x4c, 0x57, 0x12, 0x26, 0x0a, 0x0f, 0x43, 0x43, 0x50, 0x5f, 0x4f, 0x50, 0x4e,
	0x50, 0x53, 0x54, 0x4e, 0x5f, 0x51, 0x54, 0x59, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x43, 0x43, 0x50, 0x4f, 0x50, 0x4e, 0x50, 0x53, 0x54, 0x4e, 0x51, 0x54, 0x59, 0x12, 0x26, 0x0a,
	0x0f, 0x43, 0x43, 0x50, 0x5f, 0x4f, 0x50, 0x4e, 0x50, 0x53, 0x54, 0x4e, 0x5f, 0x56, 0x41, 0x4c,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x43, 0x43, 0x50, 0x4f, 0x50, 0x4e, 0x50, 0x53,
	0x54, 0x4e, 0x56, 0x41, 0x4c, 0x12, 0x20, 0x0a, 0x0c, 0x43, 0x43, 0x50, 0x5f, 0x45, 0x58, 0x52,
	0x43, 0x5f, 0x51, 0x54, 0x59, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x43, 0x50,
	0x45, 0x58, 0x52, 0x43, 0x51, 0x54, 0x59, 0x12, 0x22, 0x0a, 0x0d, 0x43, 0x43, 0x50, 0x5f, 0x41,
	0x53, 0x47, 0x4e, 0x44, 0x5f, 0x51, 0x54, 0x59, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x43, 0x43, 0x50, 0x41, 0x53, 0x47, 0x4e, 0x44, 0x51, 0x54, 0x59, 0x12, 0x26, 0x0a, 0x0f, 0x43,
	0x43, 0x50, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x43, 0x43, 0x50, 0x4f, 0x50, 0x54, 0x50, 0x52, 0x45, 0x4d,
	0x49, 0x55, 0x4d, 0x12, 0x25, 0x0a, 0x0f, 0x43, 0x43, 0x50, 0x5f, 0x4d, 0x54, 0x4d, 0x5f, 0x4f,
	0x50, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x43, 0x43,
	0x50, 0x4d, 0x54, 0x4d, 0x4f, 0x50, 0x4e, 0x56, 0x41, 0x4c, 0x12, 0x27, 0x0a, 0x10, 0x43, 0x43,
	0x50, 0x5f, 0x49, 0x4d, 0x54, 0x4d, 0x5f, 0x4f, 0x50, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x43, 0x43, 0x50, 0x49, 0x4d, 0x54, 0x4d, 0x4f, 0x50, 0x4e,
	0x56, 0x41, 0x4c, 0x12, 0x37, 0x0a, 0x18, 0x43, 0x43, 0x50, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x4d,
	0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x52, 0x47, 0x4e, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x43, 0x43, 0x50, 0x45, 0x58, 0x54, 0x52, 0x4d, 0x4c,
	0x4f, 0x53, 0x53, 0x4d, 0x52, 0x47, 0x4e, 0x45, 0x58, 0x54, 0x52, 0x41, 0x12, 0x24, 0x0a, 0x0e,
	0x43, 0x43, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x4e, 0x4c, 0x5f, 0x4d, 0x52, 0x47, 0x4e, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x43, 0x43, 0x50, 0x41, 0x44, 0x44, 0x4e, 0x4c, 0x4d, 0x52,
	0x47, 0x4e, 0x12, 0x22, 0x0a, 0x0d, 0x43, 0x43, 0x50, 0x5f, 0x53, 0x50, 0x43, 0x4c, 0x5f, 0x4d,
	0x52, 0x47, 0x4e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x43, 0x43, 0x50, 0x53, 0x50,
	0x43, 0x4c, 0x4d, 0x52, 0x47, 0x4e, 0x12, 0x22, 0x0a, 0x0d, 0x43, 0x43, 0x50, 0x5f, 0x54, 0x4e,
	0x44, 0x52, 0x5f, 0x4d, 0x52, 0x47, 0x4e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x43,
	0x43, 0x50, 0x54, 0x4e, 0x44, 0x52, 0x4d, 0x52, 0x47, 0x4e, 0x12, 0x24, 0x0a, 0x0e, 0x43, 0x43,
	0x50, 0x5f, 0x44, 0x4c, 0x56, 0x52, 0x59, 0x5f, 0x4d, 0x52, 0x47, 0x4e, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x43, 0x43, 0x50, 0x44, 0x4c, 0x56, 0x52, 0x59, 0x4d, 0x52, 0x47, 0x4e,
	0x12, 0x34, 0x0a, 0x17, 0x43, 0x43, 0x50, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x4d, 0x5f, 0x4d, 0x49,
	0x4e, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x52, 0x47, 0x4e, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x43, 0x43, 0x50, 0x45, 0x58, 0x54, 0x52, 0x4d, 0x4d, 0x49, 0x4e, 0x4c, 0x4f,
	0x53, 0x53, 0x4d, 0x52, 0x47, 0x4e, 0x12, 0x1e, 0x0a, 0x0b, 0x43, 0x43, 0x50, 0x5f, 0x4d, 0x54,
	0x4d, 0x5f, 0x46, 0x4c, 0x47, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x43, 0x50,
	0x4d, 0x54, 0x4d, 0x46, 0x4c, 0x47, 0x12, 0x2d, 0x0a, 0x13, 0x43, 0x43, 0x50, 0x5f, 0x45, 0x58,
	0x54, 0x52, 0x4d, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x52, 0x47, 0x4e, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x43, 0x43, 0x50, 0x45, 0x58, 0x54, 0x52, 0x4d, 0x4c, 0x4f, 0x53,
	0x53, 0x4d, 0x52, 0x47, 0x4e, 0x12, 0x29, 0x0a, 0x11, 0x43, 0x43, 0x50, 0x5f, 0x46, 0x4c, 0x41,
	0x54, 0x5f, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x52, 0x47, 0x4e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x43, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x54, 0x56, 0x41, 0x4c, 0x4d, 0x52, 0x47, 0x4e,
	0x12, 0x1e, 0x0a, 0x0b, 0x43, 0x43, 0x50, 0x5f, 0x54, 0x52, 0x47, 0x5f, 0x50, 0x52, 0x43, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x43, 0x43, 0x50, 0x54, 0x52, 0x47, 0x50, 0x52, 0x43,
	0x12, 0x25, 0x0a, 0x0f, 0x43, 0x43, 0x50, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x47, 0x5f,
	0x50, 0x52, 0x43, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x43, 0x43, 0x50, 0x4d, 0x49,
	0x4e, 0x54, 0x52, 0x47, 0x50, 0x52, 0x43, 0x12, 0x2a, 0x0a, 0x11, 0x43, 0x43, 0x50, 0x5f, 0x44,
	0x45, 0x56, 0x4f, 0x4c, 0x4d, 0x4e, 0x54, 0x5f, 0x4d, 0x52, 0x47, 0x4e, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x43, 0x43, 0x50, 0x44, 0x45, 0x56, 0x4f, 0x4c, 0x4d, 0x4e, 0x54, 0x4d,
	0x52, 0x47, 0x4e, 0x12, 0x28, 0x0a, 0x10, 0x43, 0x43, 0x50, 0x5f, 0x4d, 0x54, 0x4d, 0x53, 0x51,
	0x5f, 0x4f, 0x52, 0x44, 0x43, 0x4e, 0x54, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43,
	0x43, 0x50, 0x4d, 0x54, 0x4d, 0x53, 0x51, 0x4f, 0x52, 0x44, 0x43, 0x4e, 0x54, 0x12, 0x1e, 0x0a,
	0x0b, 0x43, 0x43, 0x50, 0x5f, 0x41, 0x56, 0x47, 0x5f, 0x50, 0x52, 0x43, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x43, 0x43, 0x50, 0x41, 0x56, 0x47, 0x50, 0x52, 0x43, 0x32, 0x49, 0x0a,
	0x0a, 0x43, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x43, 0x43, 0x50, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x2e, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x43, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x43, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x03, 0x5a, 0x01, 0x2e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_positions_commodities_proto_rawDescOnce sync.Once
	file_positions_commodities_proto_rawDescData = file_positions_commodities_proto_rawDesc
)

func file_positions_commodities_proto_rawDescGZIP() []byte {
	file_positions_commodities_proto_rawDescOnce.Do(func() {
		file_positions_commodities_proto_rawDescData = protoimpl.X.CompressGZIP(file_positions_commodities_proto_rawDescData)
	})
	return file_positions_commodities_proto_rawDescData
}

var file_positions_commodities_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_positions_commodities_proto_goTypes = []any{
	(*CCPRequest)(nil),         // 0: positions.CCPRequest
	(*CCPResponse)(nil),        // 1: positions.CCPResponse
	(*CommodityPositions)(nil), // 2: positions.CommodityPositions
}
var file_positions_commodities_proto_depIdxs = []int32{
	2, // 0: positions.CCPResponse.COMMO:type_name -> positions.CommodityPositions
	0, // 1: positions.CCPService.GetCCPData:input_type -> positions.CCPRequest
	1, // 2: positions.CCPService.GetCCPData:output_type -> positions.CCPResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_positions_commodities_proto_init() }
func file_positions_commodities_proto_init() {
	if File_positions_commodities_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_positions_commodities_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CCPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_positions_commodities_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CCPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_positions_commodities_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CommodityPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_positions_commodities_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_positions_commodities_proto_goTypes,
		DependencyIndexes: file_positions_commodities_proto_depIdxs,
		MessageInfos:      file_positions_commodities_proto_msgTypes,
	}.Build()
	File_positions_commodities_proto = out.File
	file_positions_commodities_proto_rawDesc = nil
	file_positions_commodities_proto_goTypes = nil
	file_positions_commodities_proto_depIdxs = nil
}
