// protoc --proto_path=internal --go_out=generated --go-grpc_out=generated internal/positions/Mtf_Open.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: positions/Mtf_Open.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MtfPositionService_GetMtfPosition_FullMethodName = "/PositionService.MtfPositionService/GetMtfPosition"
)

// MtfPositionServiceClient is the client API for MtfPositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MtfPositionServiceClient interface {
	GetMtfPosition(ctx context.Context, in *PositionRequest, opts ...grpc.CallOption) (*PositionResponse, error)
}

type mtfPositionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMtfPositionServiceClient(cc grpc.ClientConnInterface) MtfPositionServiceClient {
	return &mtfPositionServiceClient{cc}
}

func (c *mtfPositionServiceClient) GetMtfPosition(ctx context.Context, in *PositionRequest, opts ...grpc.CallOption) (*PositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PositionResponse)
	err := c.cc.Invoke(ctx, MtfPositionService_GetMtfPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MtfPositionServiceServer is the server API for MtfPositionService service.
// All implementations must embed UnimplementedMtfPositionServiceServer
// for forward compatibility.
type MtfPositionServiceServer interface {
	GetMtfPosition(context.Context, *PositionRequest) (*PositionResponse, error)
	mustEmbedUnimplementedMtfPositionServiceServer()
}

// UnimplementedMtfPositionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMtfPositionServiceServer struct{}

func (UnimplementedMtfPositionServiceServer) GetMtfPosition(context.Context, *PositionRequest) (*PositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMtfPosition not implemented")
}
func (UnimplementedMtfPositionServiceServer) mustEmbedUnimplementedMtfPositionServiceServer() {}
func (UnimplementedMtfPositionServiceServer) testEmbeddedByValue()                            {}

// UnsafeMtfPositionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MtfPositionServiceServer will
// result in compilation errors.
type UnsafeMtfPositionServiceServer interface {
	mustEmbedUnimplementedMtfPositionServiceServer()
}

func RegisterMtfPositionServiceServer(s grpc.ServiceRegistrar, srv MtfPositionServiceServer) {
	// If the following call pancis, it indicates UnimplementedMtfPositionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MtfPositionService_ServiceDesc, srv)
}

func _MtfPositionService_GetMtfPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MtfPositionServiceServer).GetMtfPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MtfPositionService_GetMtfPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MtfPositionServiceServer).GetMtfPosition(ctx, req.(*PositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MtfPositionService_ServiceDesc is the grpc.ServiceDesc for MtfPositionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MtfPositionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PositionService.MtfPositionService",
	HandlerType: (*MtfPositionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMtfPosition",
			Handler:    _MtfPositionService_GetMtfPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "positions/Mtf_Open.proto",
}
